//в чём собственно смысл. Всё что делает на сайте пользователь, это события(кликает мышкой(один-два раза), крутитит колёсико ......)
//что бы отстлеживать события которые происходят на странице мы устанавливаем обработчики которые следят за различными событиями




                                                //КАК ИСПОЛЬЗОВАТЬ ОБРАБОТЧИКИ СОБЫТИЙ
        //1) Вариант, вписать  обработчик прямо в html код. можешь глянуть на 10 страничку кода в index.html  там событие onclick
//выглядит вот так
//<button onclick="alert(`Worked a hundler in a html`)" id="btn">Нажми меня</button>
//этот вариант на самом деле не стоит применять, обычно подобные код пишут те кто не владеют кодом типо администраторов сайта
//для своих каких то тестов

        //2) использовать свойства dom-дерева для обработки событий,ОН ТАК ЖЕ ПРОБЛЕМНЫЙ ЕСЛИ ЧТО, не стоит его использовать
const btn = document.querySelector(`button`);

/*btn.onclick = function() {
    alert(`Used a script btn.onclick`);
};*/
//основная беда в том что если мы используем его вот так несколько раз то каждый последующий обработчик заменяет предыдущий,
//и такими макаром мы можем потерять функционал. (кода всегда будет много, мы можем просто незнать о том где и какие обработчики 
//мы присвоили) и самое тупое то что мы не сможем удалить это событие если вдруг понадобится

        //3) ПРИВИЛЬНЫЙ ВАРИАНТ ИСПОЛЬЗОВАНИЯ ОБРАБОТЧИКОВ
//addEventListener - мы добавляем "слушатель событий", внутрь помешщаем
//`click` - это наше событие, там много зарезервированных событий
// и вторым аргументом идёт коллбэкфункция, и внё необходимо поместить какое-то действие
btn.addEventListener(`click`,()=>{ alert(`Click with addEventListener`);});

//в чём плюсы? например мы можем добавить ещё одно точно такое же событие
btn.addEventListener(`click`,()=>{ alert(`second clik on btn`);});

//и выполнится и первое  и второе событие, т.е функционал мы не потеряли

//например мы можем ещё добавить какое либо событие, например событие наведение мышки на объект
btn.addEventListener(`mouseenter`,()=>{
    console.log(`hover`);
});

//иногда необходимо получать данные о том элементе с которым мы взаимодействуем что за событие произошло, или что за элемент используется
// его координаты........... для этого есть такой объект как event. Его передают в callback функцию и называют либо "event" либо  "e"
//ВАЖНО если нам необходимо втолкнуть в колбэк функцию что либо ещё, то всё равно ВСЕГДА 1 аргументом будет "event"

btn.addEventListener(`mouseenter`,(event)=>{
    console.log(`work with event`);
    console.log(event)
    
});
//можно глянуть что в себе содержит event. Там много свойств но самые интересные 
//type - это то событие что произошло с элементом
//target - это тот элемент НА КОТОРОМ произошло событие
//кстати можем передавать не event а сразу то свойство которое нас интересует например event.target
//так же на этом методе можно вызвать его удаление
/*btn.addEventListener(`mouseenter`,(event)=>{
    console.log(`Delete element`);
    event.target.remove(); //и элемент удалится
});*/




                                //правильный вариант
//но прикол в том что мы бы хотели иметь возможность удалять обработчики событий с некоторых
//элементов, поэтому ПРАВИЛЬНЫЙ ПОДХОД выглядит так
const deleteElements = (event2)=>{
    //небудем удалять элемент напишем чёт проще
    console.log(`отработала нормальная функция удаления элемента`);
};

//а тут уже обращаемся к нашему btn  и кидаем туда нашу функцию
btn.addEventListener(`click`,deleteElements);//отработало нормально

// и сразу же мы удаляем обработчик событий
btn.removeEventListener(`click`,deleteElements);
//и в итоге мы сразу адекватно удалили обработчик


//ВСПЛЫТИЕ СОБЫТИЙ - это когда обработчик вначале срабатывает на самом вложенном элементе
//а уже потом события срабатывают на каждом родителе самого вложенного


                                //ОТМЕНА СТАНДАРТНОГО ПОВЕДЕНИЯ
                                //БРАУЗЕРА(запрет на выделение напримем)
//например у нас на сайте ессть ссылка на ютуб, если мы по ней кликнем то браузер перейдёт по ней
//но мы можем отменить это поведение
const link = document.querySelector(`a`);
link.addEventListener(`click`,function(event){
    event.preventDefault();

    //ну и дальше мы можем пыполнить то действие которое нам необходимо что бы оно выполнялось по
    //клику
    console.log(event.target);
});
//всё теперь клик по ссылке не будет приводить к переходу на эту ссылку
//так же хочу заметить что  addEventListener может принимать в себя ТРИ значения
//1)событие
//2)то что должно выполниться по событию
//3)ОПЦИИ, например мы мождем кинуть опцию  {ONCE: true}  и тогда обработчик выполни это
//действие ОДИН РАЗ

