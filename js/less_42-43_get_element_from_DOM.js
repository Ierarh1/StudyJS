const box         = document.getElementById(`box`);
const btns        = document.getElementsByTagName(`button`);
const circles     = document.getElementsByClassName(`circle`);
const hearts      = document.querySelectorAll(`.heart`);
const oneHeart    = document.querySelector(`.heart`);


//кстати ещё один вариант как получать элементы. У нас во wrapper лежат heart.Таким образом мы можем получить эти элементы
//через wrapper
const wrapper_test = document.querySelector(`.wrapper`);
//а сердца уже получим через wrapper_test
const hearts_test = wrapper_test.querySelector(`.heart`);
//получается что-то типа вложенности но она в целом удобная


//далее будет работать с инлайн стилями(это те стили которые перебивают любые другие в том числе и css), 
//как работать со стилями которые пришли из css эт потом.
box.style.backgroundColor = `blue`;//можно цвет записывать в rgb или через ff
//работаем так же как и в css если передаём размер то с указанием что это
box.style.width = `500px`;

//округлим кнопку вторую кнопку
btns[1].style.borderRadius = `100%`;

//по индексу мы можем обращаться только к одному элементу, но как обратиться ко всем элементам,
//можно конечно через цикл однако есть такой метод как cssText куда мы можем заносить стили как в css
box.style.cssText = `background-color: green; width: 700px;`
//так же в такие можно передавать вместо единиц переменные
const sizeHeight = `300px`;
const colorBoxYellow = `yellow`;
box.style.cssText = `background-color: ${colorBoxYellow}; height: ${sizeHeight};`;

//Заменим цвет на сердечках через цикл 
//foreach  а внутри callbacl функция где 1)непосредственно сам элемент2)номер по порядку 3)ссылку на массив(объект)
hearts.forEach(item=>{
    //показывается что якобы метода style у item  нету, но на деле всё работает
    item.style.backgroundColor = `green`;
});

                                        //создание элементов
// внутрь createElement(`div`); помещаем тэг который необходимо создать, в нашем
//случае возьмём блок div. ВАЖНО данный блок существует только внутри JS-файла
//на странице он никак не появится
const div = document.createElement(`div`);

//таким же образом мы можем создавать "ТЕКСТОВЫЕ УЗЛЫ(нода)" (элементы без оболочки тэга)
const test = document.createTextNode(`text test`);

//у нас уже есть класс div можно к нему применить css-класс. Например у нас в css
//есть класс .black
div.classList.add(`black`);

//впишем какой нибудь текст
div.innerHTML = `Html_test`;

//данный метод позволяет вносить не только какой нибудь текст но и html-структуры, мы спокойно можем вписать туда 
div.innerHTML = `<h1>Html_test</h1>`;
//беда этого метода в том что мы можем использовать его для получения от пользователя инфы, и пользователь спокойно
//можжет ввести нам тэги и сломать вёрстку, либо можно внести целый скрипт запрос. Поэтому в целях безопасности
//есть другой метод который принимает всё КАК ТЕКСТ
div.textContent =`<h1>Html_test</h1>`;

//есть ещё один вариант как можно вставить элемент, отталкиваясь от какого-то другого элемента
div.insertAdjacentHTML(`afterbegin`,`<h1>InsertAdjacentHTML</h1>`);
//div -это элемент от которого отталкивается
// далее в самой функции первым идёт ключевое слово(их там 4 выберёшь чё надо) оно определяет как оно будет вставлено
//ну и потом идёт то что мы должны втсавить




//теперь можно добавить наш элемент div в конец блока body
document.body.append(div);


//так же мы можем добавить элемент не только в конец блока body но и например в конец 
// любого другого блока или класса, например есть класс .wrapper, к нему и добавим
// кстати если мы работаем с классом всего лишь раз мы можем не создавать переменную
document.querySelector(`.wrapper`).append(div);
//и так тоже будет работать

//так же мы можем добавлять элемент вначало блока
const wrapper = document.querySelector(`.wrapper`);
wrapper.prepend(div);

//ВАЖНО у нас один и тот же элемент и когда мы используем prepend, append мы
//не создаём новый элемент а двигаем старый


//так же мы можем двигатьэлементы с помощью before after. Грубо говоря мы берём элемент
//и вставляем куда надо
hearts[1].before(div);//соответственно ДО
hearts[1].after(div);//после
//опять же мы просто двигаем элемент, мы некопируем его

//теперь как УДАЛИТЬ элемент
circles[0].remove();

//метод для замены одного элемента другим
//1) что мы заменяем hearts[0]
//2) на что заменяем circles[0]
hearts[0].replaceWith(circles[0]);