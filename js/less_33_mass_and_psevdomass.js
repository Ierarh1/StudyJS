"use strict";

const arr = [1, 5, 7, 3, 5, 8];
//тупо удаляет последний элемент в массиве
arr.pop();

console.log(arr);

//добавляем в конец массива элемент
arr.push(55);

console.log(arr);

//есть так же команды для работы с началом массива но они НЕИСПОЛЬЗУЮТСЯ(unshift,shift)
//если мы работаем с началом массива, то индекс остальных элементов начинает меняться
//и подобная переиндексация может занять огромное количество времени, поэтому лучше работать с концом массива



//мы так же можем перебрать элементы в массиве через for а можем через цикл for_of(работает с массивоподобными сущностями
//массив, строку, псевдомассивы)
//главное надо помнить что fjr_in неработает в массивах
for(let value of arr)
{
    console.log(value);
}




const arr_test = [1, 5, 7, 3, 5, 8];
//и ещё один более менее интересный способ перебора элементв в массиве с помощью forEach(); он принимает в 
//себя целую call-back функцию.В call-back можно максимум поместить 3 переменные.
//1)item - это тот элемент который мы перебираем [1, 5, 7, 3, 5, 8]
//2)i -индекс
//3)arr_link - ссылка на тот массив который мы перебираем
arr_test.forEach(function(item,i,arr_link)
{
    console.log(`Индекс ${i}, элемент ${item} внутри массива ${arr_link}`);
});

//Обычно везде используют forEach(): но иногда используют for_of 
//тк как у for_of есть break; continue;
//так же есть arr_test.mapfunction(); он в отличие от forEach, перебирает И МОДИФИЦИРУЕТ объекты
//arr_test.filter(); по названию понятно чё он делать, например мы можем отфильтровать массив по чётным числам
//for_each просто перебирает массивы, а остальные методы модиифицируют массив

//метод split
// к примеру у нас есть строка полученная от пользователя через разделитель
let str = `Товар_1, Товар_2, Товар_3, Товар_4, Товар_5`;
//в скобочках указывам разделитель(`, `)
const products = str.split(`, `);
//на выходе будет массив
console.log(products);

//так же есть обратная операция ИЗ МАССИВА делаем СТРОКУ, ну малоло мож пользователю надо чёто показать
//внутри указываем разделитель через который они будут выводиться (; )
products_mofifi = products.join(`; `);
console.log(products_mofifi);


//немного странный метод sort(), он всегда сортирует элементы внутри массива как строки, и это может вызвать
//в некоторых случаях странные результаты. Попробуем отсортировать строки
let str_sort = [`Abr`,`Lrb`,`Cdp`,`Tmp`,`Tst`];
let test_str = str_sort.sort();
//массив будет отсортирован в алфавитном порядке
console.log(test_str);



//однако если мы попробуем отсортировать числа
let int_sort = [2,13,26,8,10];
let test_int = int_sort.sort();
//то мы получи какую-то хрень, массив выстроится [10,13,2,26,8]
console.log(test_int);
//а всё потому что он сортирует их как строки

//однако можно заставить sort(), работать с числами правильно. Тк внутри sort() использует алгоритм быстрой сортировки
//то мы можем передать в него шаблон(колбэк функцию)

function compareNum(a,b)
{
    return a-b;
}

// и   теперь пихаем её в sort();
test_int = int_sort.sort(compareNum);
//и вуаля отсортировался правильно от меньшего к большему
console.log(test_int);


//ПСЕВДОМАССИВЫ 
//по сути это элемент который имеет структуру такую же как и массив. Они ооочень часто будут приходить нам со страницы
//от пользователя. Важным отличием псевдомассивов в том что в них нет НИКАКИХ методов, 
//нет метода push(), pop(); forEach()....................